<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Round Robin</title>
    <link
      href="https://fonts.googleapis.com/css?family=Nunito:200,300,400,700"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor"
      crossorigin="anonymous"
    />
    <link rel="stylesheet" href="../css/about.css">
  </head>
  <body>
    <h1 class="headings" style="margin-bottom: 3.5rem;">ROUND ROBIN</h1>
    <div class="container" style="width: 100rem;">
      <p style="color: white; font-size: 1.25rem;">
        Round Robin CPU Scheduling is the most important CPU Scheduling
        Algorithm which is ever used in the history of CPU Scheduling
        Algorithms. Round Robin CPU Scheduling uses Time Quantum (TQ). The Time
        Quantum is something which is removed from the Burst Time and lets the
        chunk of process to be completed. Time Sharing is the main emphasis of
        the algorithm. Each step of this algorithm is carried out cyclically.
        The system defines a specific time slice, known as a time quantum.
        First, the processes which are eligible to enter the ready queue enter
        the ready queue. After entering the first process in Ready Queue is
        executed for a Time Quantum chunk of time. After execution is complete,
        the process is removed from the ready queue. Even now the process
        requires some time to complete its execution, then the process is added
        to Ready Queue. The Ready Queue does not hold processes which already
        present in the Ready Queue. The Ready Queue is designed in such a manner
        that it does not hold non unique processes. By holding same processes
        Redundancy of the processes increases. After, the process execution is
        complete, the Ready Queue does not take the completed process for
        holding.
      </p>
      <div style="display: flex; padding: 2.7rem 5rem 2rem">
        <div style="width: 30rem; color: white; margin: 0 5rem;">
          <ul>
            <h1 class="sub-headings">Advantages</h1>
            <li>A fair amount of CPU is allocated to each job.</li>
            <li>
              Because it doesn't depend on the burst time, it can truly be
              implemented in the system.
            </li>
            <li>
              It is not affected by the convoy effect or the starvation problem
              as occurred in First Come First Serve CPU Scheduling Algorithm.
            </li>
          </ul>
        </div>
        <div style="width: 30rem; color: white; margin: 0 2rem;">
          <ul>
            <h1 class="sub-headings">Disadvantages</h1>
            <li>
              Low Operating System slicing times will result in decreased CPU
              output.
            </li>
            <li>
              Round Robin CPU Scheduling approach takes longer to swap contexts.
            </li>
            <li>Time quantum has a significant impact on its performance.</li>
            <li>The procedures cannot have priorities established.</li>
          </ul>
        </div>
      </div>
      <button class="sim-button">Simulator</button>
    </div>
  </body>
</html>
